// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack

/**
 * A library of commonly used mathematical functions.
 * Note: Jack compilers implement multiplication and division using OS method calls.
 */
class Math {

    static Array two_powers;

    /** Initializes the library. */
    function void init() {
        let two_powers = Array.new(16);
        let two_powers[0] = 1;
        let two_powers[1] = 2;
        let two_powers[2] = 4;
        let two_powers[3] = 8;
        let two_powers[4] = 16;
        let two_powers[5] = 32;
        let two_powers[6] = 64;
        let two_powers[7] = 128;
        let two_powers[8] = 256;
        let two_powers[9] = 512;
        let two_powers[10] = 1024;
        let two_powers[11] = 2048;
        let two_powers[12] = 4096;
        let two_powers[13] = 8192;
        let two_powers[14] = 16384;
        let two_powers[15] = (0 - 16384) - 16384;
        return;
    }

    /** Returns the absolute value of x. */
    function int abs(int x) {
        if (x > 0) {
            return x;
        } else {
            return -x;
        }
    }

    function int bit(int x, int index) {
        return 0;

    }

    /** Returns the product of x and y. 
     *  When a Jack compiler detects the multiplication operator '*' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x*y and multiply(x,y) return the same value.
     */
    function int multiply(int x, int y) {
        return 0;
    }

    /** Returns the integer part of x/y.
     *  When a Jack compiler detects the multiplication operator '/' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x/y and divide(x,y) return the same value.
     */
    function int divide(int x, int y) {
        var int result, q, two_q;
        var boolean positive;
        if (y = 0) {
            do Sys.error(3);
        }
        if (x > 0) {
            let positive = true;
        } else {
            let positive = false;
            let x = -x;
        }
        if (y < 0) {
            let positive = ~positive;
            let y = -y;
        }
        if (x = 0 | y > x) {
            return 0;
        }
        let q = Math.divide(x, y + y);
        let two_q = q + q;
        if (y * (two_q + 1) > x) {
            let result = two_q;
        } else {
            let result = two_q + 1;
        }
        if (positive) {
            return result;
        } else {
            return -result;
        }
    }   

    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {
        var int result, temp, index, square;
        if (x < 0) { do Sys.error(24); }
        let index = 7;
        let result = 0;
        while (index > -1) {
            let temp = result + two_powers[index];
            let square = temp * temp;
            if (~(square > x) & square > 0) {
                let result = result + temp;
            }
        }
        return result;
    }

    /** Returns the greater number. */
    function int max(int a, int b) {
        if (a > b) {
            return a;
        } else {
            return b;
        }
    }

    /** Returns the smaller number. */
    function int min(int a, int b) {
        if (a < b) {
            return a;
        } else {
            return b;
        }
    }
}
