// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack

/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 512 rows (indexed 0..511, top to bottom)
 * of 256 pixels each (indexed 0..255, left to right). The top left pixel on 
 * the screen is indexed (0,0).
 */
class Screen {
    static int start_screen, end_screen;
    static boolean color;

    /** Initializes the Screen. */
    function void init() {
        let start_screen = 16384;
        let end_screen = 24576;
        let color = true;
        return;
    }

    /** Erases the entire screen. */
    function void clearScreen() {
        var int address;
        let address = start_screen;
        while (address < end_screen) {
            do Memory.poke(address, 0);
            let address = address + 1;
        }
        return;
    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) {
        let color = b;
        return;
    }

    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) {
        var int address, temp, current_value;
        let address = (Math.mult2n(y, 5) + Math.div2n(x, 4)) + start_screen;
        if (color) {
            do Memory.poke(address, Memory.peek(address) | Math.get2n(Math.mod2n(x, 4)));
        } else {
            do Memory.poke(address, Memory.peek(address) & ~Math.get2n(Math.mod2n(x, 4)));
        }
        return;
    }

    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    function void drawLine(int x1, int y1, int x2, int y2) {
        var int temp, dx, dy, a, b, state, y_move, address, move_address;
        if ((x1 < 0 | x2 > 511) | (y1 < 0 | y2 > 255)) {
            do Sys.error(8);
        }
        if (x1 > x2) {
            let temp = x1;  // swap x
            let x1 = x2;
            let x2 = temp;
            let temp = y1; // swap y
            let y1 = y2;
            let y2 = temp;
        }
        let dx = x2 - x1;
        if (dx = 0) {
            do Screen.drawVerticalLine(x1, y1, y2);
            return;
        }
        let dy = Math.abs(y1 - y2);
        let address = Math.mult2n(y1, 5) + Math.div2n(x1, 4) + start_screen;
        if (dy = 0) {
            if (color) {
                do Screen.drawBlackHorizontalLine(x1, x2, y2, address);
            } else {
                do Screen.drawWhiteHorizontalLine(x1, x2, y2, address);
            }
            return;
        }
        if (y1 > y2) {
            let y_move = -1;
            let move_address = -32;
        } else {
            let y_move = 1;
            let move_address = 32;
        }    
        let a = 0;
        let b = 0;
        let state = 0;
        if (color) {
            while (~(dx < a) & ~(dy < b)) {
                do Memory.poke(address, Memory.peek(address) | Math.get2n(Math.mod2n(x1 + a, 4)));
                if (state < 0) {
                    let a = a + 1;
                    if (Math.mod2n(x1 + a, 4) = 0) {
                        let address = address + 1;
                    }
                    let state = state + dy;
                } else {
                    let b = b + y_move;
                    let address = address + move_address;
                    let state = state - dx;
                }
            }
            return;
        }
        while (~(dx < a) & ~(dy < b)) {
            do Memory.poke(address, Memory.peek(address) & ~Math.get2n(Math.mod2n(x1 + a, 4)));
            if (state < 0) {
                let a = a + 1;
                if (Math.mod2n(x1 + a, 4) = 0) {
                    let address = address + 1;
                }
                let state = state + dy;
            } else {
                let b = b + y_move;
                let address = address + move_address;
                let state = state - dx;
            }
        }
        return;
    }

    function void drawBlackHorizontalLine(int x1, int x2, int y, int address) {
        var int temp, length;
        let length = 16 - Math.mod2n(x1, 4);
        let temp = 0;
        while (~(x1 > x2) & length > 0) {
            let temp = temp | Math.get2n(Math.mod2n(x1, 4));
            let x1 = x1 + 1;
            let length = length - 1;
        }
        do Memory.poke(address, Memory.peek(address) | temp);
        let address = address + 1;
        while(~(x2 - x1 < 16)) {
            do Memory.poke(address, color);
            let address = address + 1;
            let x1 = x1 + 16;
        }
        let temp = 0;
        while (~(x1 > x2)) {
            let temp = temp | Math.get2n(Math.mod2n(x1, 4));
            let x1 = x1 + 1;
        }
        do Memory.poke(address, Memory.peek(address) | temp);
        return;
    }

    function void drawWhiteHorizontalLine(int x1, int x2, int y, int address) {
        var int temp, length;
        let length = 16 - Math.mod2n(x1, 4);
        let temp = 0;
        while (~(x1 > x2) & length > 0) {
            let temp = temp | Math.get2n(Math.mod2n(x1, 4));
            let x1 = x1 + 1;
            let length = length - 1;
        }
        do Memory.poke(address, Memory.peek(address) & (~temp));
        let address = address + 1;
        while(~(x2 - x1 < 16)) {
            do Memory.poke(address, color);
            let address = address + 1;
            let x1 = x1 + 16;
        }
        let temp = 0;
        while (~(x1 > x2)) {
            let temp = temp | Math.get2n(Math.mod2n(x1, 4));
            let x1 = x1 + 1;
        }
        do Memory.poke(address, Memory.peek(address) & (~temp));
        return;
    }

    function void drawVerticalLine(int x, int y1, int y2) {
        var int temp, address;
        if (y1 > y2) {
            let temp = y1;
            let y1 = y2;
            let y2 = temp;
        }
        let address = Math.mult2n(y1, 5) + Math.div2n(x, 4) + start_screen;
        let temp = Math.get2n(Math.mod2n(x, 4));
        if (color) {
            while (~(y1 > y2)) {
                do Memory.poke(address, Memory.peek(address) | temp);
                let address = address + 32;
                let y1 = y1 + 1;
            }
            return;
        }
        let temp = ~temp;
        while (~(y1 > y2)) {
            do Memory.poke(address, Memory.peek(address) & (~temp));
            let address = address + 32;
            let y1 = y1 + 1;
        }
        return;
    }

    /** Draws a filled rectangle whose top left corner is (x1, y1)
     * and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
        var int address;
        let address = Math.mult2n(y1, 5) + Math.div2n(x1, 4) + start_screen;
        if (color) {
            while (~(y1 > y2)) {
                do Screen.drawBlackHorizontalLine(x1, x2, y1, address);
                let y1 = y1 + 1;
                let address = address + 32;
            }
            return;
        }
        while (~(y1 > y2)) {
            do Screen.drawWhiteHorizontalLine(x1, x2, y1, address);
            let y1 = y1 + 1;
            let address = address + 32;
        }
        return;
    }

    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int x, int y, int r) {
        var int dy, square_radius, root, y_dy, square_dy, address, x_minus_r2, x_plus_r2, distance;
        let dy = 0;
        let square_dy = 0;
        let square_radius = r * r;
        let address = Math.mult2n(y, 5) + Math.div2n((x - r), 4) + start_screen;
        let distance = 64;
        if (color) {
            do Screen.drawBlackHorizontalLine(x - r, x + r, y, address);
            while (dy < r) {
                let square_dy = square_dy + dy + dy + 1;
                let dy = dy + 1;
                let y_dy = y + dy;
                let root = Math.sqrt(square_radius - square_dy);
                let x_minus_r2 = x - root;
                let x_plus_r2 = x + root;
                let address = Math.mult2n(y_dy, 5) + Math.div2n(x_minus_r2, 4) + start_screen;
                do Screen.drawBlackHorizontalLine(x_minus_r2, x_plus_r2, y_dy, address);
                let y_dy = y - dy;
                let address = address - distance;
                let distance = distance + 64;
                do Screen.drawBlackHorizontalLine(x_minus_r2, x_plus_r2, y_dy, address);
            }
            return;
        }
        do Screen.drawWhiteHorizontalLine(x - r, x + r, y, address);
        while (dy < r) {
            let square_dy = square_dy + dy + dy + 1;
            let dy = dy + 1;
            let y_dy = y + dy;
            let root = Math.sqrt(square_radius - square_dy);
            let x_minus_r2 = x - root;
            let x_plus_r2 = x + root;
            let address = Math.mult2n(y_dy, 5) + Math.div2n(x_minus_r2, 4) + start_screen;
            do Screen.drawWhiteHorizontalLine(x_minus_r2, x_plus_r2, y_dy, address);
            let y_dy = y - dy;
            let address = address - distance;
            let distance = distance + 64;
            do Screen.drawWhiteHorizontalLine(x_minus_r2, x_plus_r2, y_dy, address);
        }
        return;
    }
}
